model ModelName
  uses "mmsystem", "mmjobs","mmxprs"

  declarations
  nbCustomers: integer
  nbLocations: integer
  nbSuppliers: integer
  nbProductGroups: integer
  nbVehicleTypes: integer
  nbPeriods: integer
  end-declarations

! Forwarding the functions
forward procedure computeTotalCost(I: set of integer) 

filename := "CaseStudyData.txt";
! filename := "CaseStudyDataAggregated.txt"

initializations from filename
  nbCustomers nbSuppliers nbProductGroups nbVehicleTypes
end-initializations

nbLocations := nbCustomers

nbPeriods := 10

declarations
  Locations = 1..nbLocations
  Customers = 1..nbCustomers
  Suppliers = 1..nbSuppliers
  Products = 1..nbProductGroups
  Vehicles = 1..nbVehicleTypes
  Periods = 1..nbPeriods

  CustomerId: array(Customers) of string
  CustomerEasting: array(Customers) of real
  CustomerNorthing: array(Customers) of real
  Demand: array(Customers, Products, Periods) of real
  total_demand: array(Products) of real

  SupplierId: array(Suppliers) of integer
  SupplierEasting: array(Customers) of real
  SupplierNorthing: array(Customers) of real
  SupplierProductGroup: array(Suppliers) of integer
  SupplierCapacity: array(Suppliers) of real
  SupplierVehicleType: array(Suppliers) of integer

  SetupWarehouses: array(Locations) of integer
  OperatingWarehouses: array(Locations) of integer

  Distance: array(Customers,Locations) of real
  DistanceSupplier: array(Locations,Suppliers) of real
  Cost: array(Customers,Locations) of real
  CostSupplier: array(Locations,Suppliers) of real

  VehicleCapacity: array(Vehicles) of real
  VehicleCostPerMileOverall: array(Vehicles) of real
  VehicleCostPerMileAndTonneOverall: array(Vehicles) of real
  VehicleCO2PerMileAndTonne: array(Vehicles) of real

end-declarations


declarations
  !Y: array(Locations) of integer
  op: array(Locations) of integer ! if warehouse j is built
  !X: array(Customers,Products,Periods) of integer
  !Z: array(Suppliers,Locations,Products) of integer
  Omega, OmegaRule: set of integer

  x: array(Locations,Customers,Products,Periods) of mpvar !products quantity from warehouses to customers
  z: array(Suppliers,Locations,Products,Periods) of mpvar !products quantity from suppliers to warehouses
  y: array(Locations) of mpvar ! when we build warehouse in these locations
  I: set of integer ! stores indices of locations where we build warehouse

end-declarations

initializations from filename
  CustomerId CustomerEasting CustomerNorthing
  SetupWarehouses OperatingWarehouses
  SupplierId SupplierProductGroup SupplierCapacity SupplierVehicleType
  SupplierEasting SupplierNorthing
  VehicleCapacity VehicleCostPerMileOverall VehicleCostPerMileAndTonneOverall
  VehicleCO2PerMileAndTonne
  Demand as "CustomerDemand"
  Distance as "DistanceLocationCustomer"
  DistanceSupplier as "DistanceLocationSupplier"
end-initializations


! initialize y(l)
forall(l in Locations) do
  Y(l):= 0
end-do



!according to given data
Y(10) := 1 ! in year 1, we build warehouse at location 10
Y(30) := 3 ! in year 3, we build warehouse at location 30
Y(50) := 5! in year 5, we build warehouse at location 50


! x>=0 from Y(j), for example, warehouse at location 30 can only provide products to customers from year 3,it's not operatinf before year 3
forall(j in Locations, t in Periods ) do
if(Y(j)=0) then
  forall(p in Products,i in Customers) x(j,i,p,t) = 0

  elif (t<Y(j)) then

    forall(p in Products,i in Customers) x(j,i,p,t) = 0
  end-if
end-do

! z>=0 from Y(j), for example, suppliers can only provide products to warehouse at location 30 from year 3,it's not operatinf before year 3
forall(j in Locations, t in Periods ) do
if(Y(j)=0) then
  forall(p in Products,s in Suppliers) z(s,j,p,t) = 0

  elif (t<Y(j)) then

    forall(p in Products,s in Suppliers) z(s,j,p,t) = 0
  end-if
end-do


! f(j)>0, warehouse j is built, op(j)=1
forall(j in Locations) do
  if(Y(j)>0) then
    op(j):=1
  else
  op(j):=0
  end-if
end-do


! Transports cost between suppliers and locations
forall(j in Locations, s in Suppliers) do
  if(SupplierVehicleType(s) = 1) then
    CostSupplier(j,s) := DistanceSupplier(j,s) * VehicleCostPerMileAndTonneOverall(1) / 1000
  else
    CostSupplier(j,s) := DistanceSupplier(j,s) * VehicleCostPerMileAndTonneOverall(2) / 1000
  end-if
end-do

!Transports cost between locations and customers
forall(i,j in Locations)
  Cost(i,j) := Distance(i,j) * VehicleCostPerMileAndTonneOverall(3) / 1000


! products quantity from warehouses to customers x >= demand
forall(i in Customers, t in Periods,p in Products) do
  sum(j in Locations) x(j,i,p,t) >= Demand(i,p,t)
end-do

!products quantity from suppliers to warehouses z >= products quantity from warehouses to customers x
forall(j in Locations,t in Periods,p in Products) do
  sum(s in Suppliers) z(s,j,p,t) >= sum(i in Customers) x(j,i,p,t)
end-do

! one supplier can only provide one products
forall(s in Suppliers,p in Products, j in Locations,t in Periods) do
  if(SupplierProductGroup(s)=p) then
    z(s,j,p,t)>=0
  else
    z(s,j,p,t)=0
  end-if
end-do


! procedure to compute cost
procedure computeTotalCost(I: set of integer) 
 ! setup cost
 setup := sum(j in I) op(j)*SetupWarehouses(j)
 
 ! operating cost
 forall(j in I) do
  if(Y(j)>0) then
   operatingcost := (11 - Y(j))* OperatingWarehouses(j)
  else
   operatingcost := 0
  end-if
 end-do
 
 ! transport cost
 transport := sum(j in I, i in Locations, p in Products, t in Periods) Cost(i,j)*x(j,i,p,t) + sum(s in Suppliers, j in I, p in Products, t in Periods) CostSupplier(j,s)*z(s,j,p,t)

 ! objective functiun
 obj := operatingcost+transport+setup

 minimize(obj)

end-procedure

! set of indices
I:={10, 30, 50}

!running procedure computeTotalCost
computeTotalCost(I)


! printing the quantitry of products supplied from warehouses to customer
writeln("The minimum cost is Â£",getobjval,".")
 
writeln(" ")
writeln(" ")
writeln(" ")
writeln("from warehouses")
writeln(" ")
forall(j in Locations) do
 writeln("quantity of products supplied from warehouse index = ",j)
 writeln(sum(i in Locations, p in Products, t in Periods) getsol(x(j,i,p,t)))
 writeln(" ")
end-do

writeln(" ")
writeln(" ")
writeln(" ")
writeln("to warehouses")
forall(j in Locations) do
 writeln("quantity of products supplied to warehouse index = ",j)
 writeln(sum(k in Suppliers, p in Products, t in Periods) getsol(z(k,j,p,t)))
 writeln(" ")
end-do




! forall(j in Locations,t in Periods) do
!   if(Y(j)>0) then
!   Y(j):=0
!   else
!   Y(j):=t
!   break 1
!   end-if
! end-do


end-model
