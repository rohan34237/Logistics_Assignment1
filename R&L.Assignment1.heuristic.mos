model ModelName
  uses "mmsystem", "mmjobs","mmxprs"

  declarations
  nbCustomers: integer
  nbLocations: integer
  nbSuppliers: integer
  nbProductGroups: integer
  nbVehicleTypes: integer
  nbPeriods: integer
  end-declarations

!filename := "CaseStudyData.txt";
filename := "CaseStudyDataAggregated.txt"

initializations from filename
  nbCustomers nbSuppliers nbProductGroups nbVehicleTypes
end-initializations

nbLocations := nbCustomers

nbPeriods := 10

declarations
  Locations = 1.. nbLocations
  Customers = 1..nbCustomers
  Suppliers = 1..nbSuppliers
  Products = 1..nbProductGroups
  Vehicles = 1..nbVehicleTypes
  Periods = 1..nbPeriods

  CustomerId: array(Customers) of string
  CustomerEasting: array(Customers) of real
  CustomerNorthing: array(Customers) of real
  Demand: array(Customers, Products, Periods) of real
  total_demand: array(Products) of real

  SupplierId: array(Suppliers) of integer
  SupplierEasting: array(Customers) of real
  SupplierNorthing: array(Customers) of real
  SupplierProductGroup: array(Suppliers) of integer
  SupplierCapacity: array(Suppliers) of real
  SupplierVehicleType: array(Suppliers) of integer

  SetupWarehouses: array(Locations) of integer
  OperatingWarehouses: array(Locations) of integer

  Distance: array(Customers,Locations) of real
  DistanceSupplier: array(Locations,Suppliers) of real
  Cost: array(Customers,Locations) of real
  CostSupplier: array(Locations,Suppliers) of real

  VehicleCapacity: array(Vehicles) of real
  VehicleCostPerMileOverall: array(Vehicles) of real
  VehicleCostPerMileAndTonneOverall: array(Vehicles) of real
  VehicleCO2PerMileAndTonne: array(Vehicles) of real

end-declarations

forward function calculateTotalCost(Y: array(Locations) of integer) : real


declarations
  Y, Y_min: array(Locations) of integer
  op: array(Locations) of integer ! if warehouse j is built
  !X: array(Customers,Products,Periods) of integer
  !Z: array(Suppliers,Locations,Products) of integer
  Omega, OmegaRule: set of integer

  x: array(Locations,Customers,Products,Periods) of mpvar !products quantity from warehouses to customers
  z: array(Suppliers,Locations,Products,Periods) of mpvar !products quantity from suppliers to warehouses
  y: array(Locations) of mpvar ! when we build warehouse in these locations

end-declarations

initializations from filename
  CustomerId CustomerEasting CustomerNorthing
  SetupWarehouses OperatingWarehouses
  SupplierId SupplierProductGroup SupplierCapacity SupplierVehicleType
  SupplierEasting SupplierNorthing
  VehicleCapacity VehicleCostPerMileOverall VehicleCostPerMileAndTonneOverall
  VehicleCO2PerMileAndTonne
  Demand as "CustomerDemand"
  Distance as "DistanceLocationCustomer"
  DistanceSupplier as "DistanceLocationSupplier"
end-initializations




! Initialise the cost of the best solution with +Infinity
cost_min := MAX_REAL



forall(iter in 1..500) do


  ! Go over all locations and randomly draw a number in (0,1) 
  ! if the number is >= 0.9, add the location to Y
  !then randomly allocate a year
  
  forall(j in Locations) do
    u := random
    Y(j):= 0
    if(u >= 0.9) then  ! random decision if a warehouse should be built at location j
      int := integer(round((10*random)+0.5))  ! random decision on what time the warehouse is built ie year [1,10]
      Y(j) := int
    
      
    end-if
    !Ensuring at least 1 warehouse is built in period 1
    feasible := integer(round((nbLocations*random)+0.5))
    Y(feasible):= 1 
  end-do
  
   ! f(j)>0, warehouse j is built, op(j)=1
  forall(j in Locations) do
    if(Y(j)>0) then
      op(j):=1
    else
    op(j):=0
    end-if
  end-do


  ! Transports cost between suppliers and locations
  forall(j in Locations, s in Suppliers) do
    if(SupplierVehicleType(s) = 1) then
      CostSupplier(j,s) := DistanceSupplier(j,s) * VehicleCostPerMileAndTonneOverall(1) / 1000
    else
      CostSupplier(j,s) := DistanceSupplier(j,s) * VehicleCostPerMileAndTonneOverall(2) / 1000
    end-if
  end-do

  !Transports cost between locations and customers
  forall(i,j in Locations)
    Cost(i,j) := Distance(i,j) * VehicleCostPerMileAndTonneOverall(3) / 1000

  cost := calculateTotalCost(Y);
    
  

  if cost < cost_min then

    cost_min := cost
    Y_min := Y

  end-if

end-do


function calculateTotalCost(Y: array(Locations) of integer) : real


setup := sum(j in Locations) op(j)*SetupWarehouses(j)

! Comparing all suppliers to find the cheapest for each warehouse, product and time period
forall(j in Locations, p in Products) do
  Cheapest_Supply := min(s in Suppliers | SupplierProductGroup(s) = p) CostSupplier(j,s)
  forall(s in Suppliers | CostSupplier(j,s) = Cheapest_Supply) Z(j,p) := s
end-do

! Comparing all warehouses to find the cheapest for each customer, product and time period
forall(i in Customers, p in Products, t in Periods) do
    Cheapest_Warehouse := min(j in Locations | Y(j) > 0 and Y(j) <= t) (CostSupplier(j,Z(j,p)) + Cost(i,j))
    forall(j in Locations | CostSupplier(j,Z(j,p)) + Cost(i,j) = Cheapest_Warehouse) X(i,p,t) := j
end-do

!finding total transport cost
Transport_Supply := sum(j in Locations, p in Products, t in Periods) ( (sum(i in Customers | X(i,p,t) = j) Demand(i,p,t)) * CostSupplier(j, Z(j,p)) )
Transport_Warehouse := sum(i in Customers, p in Products, t in Periods) ( Demand(i,p,t) * Cost(i,X(i,p,t)) )

!combine
transport := Transport_Supply + Transport_Warehouse


 ! operating cost
operatingcost := sum(j in Locations) op(j)*(11 - Y(j))* OperatingWarehouses(j)

  ! objective functiun
 obj := operatingcost+transport+setup

  returned := obj

end-function

initializations to filename
  Y_min as 'Locations'
end-initializations


forall(k in Locations | Y_min(k) > 0) writeln("Build ",k," in period ",Y_min(k))


end-model
