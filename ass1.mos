model ModelName
  uses "mmsystem", "mmjobs","mmxprs"

  declarations
  nbCustomers: integer
  nbLocations: integer
  nbSuppliers: integer
  nbProductGroups: integer
  nbVehicleTypes: integer
  nbPeriods: integer
  end-declarations

filename := "CaseStudyData.txt";
! filename := "CaseStudyDataAggregated.txt"

initializations from filename
  nbCustomers nbSuppliers nbProductGroups nbVehicleTypes
end-initializations

nbLocations := nbCustomers

nbPeriods := 10

declarations
  Locations = 1..nbLocations
  Customers = 1..nbCustomers
  Suppliers = 1..nbSuppliers
  Products = 1..nbProductGroups
  Vehicles = 1..nbVehicleTypes
  Periods = 1..nbPeriods

  CustomerId: array(Customers) of string
  CustomerEasting: array(Customers) of real
  CustomerNorthing: array(Customers) of real
  Demand: array(Customers, Products, Periods) of real
  total_demand: array(Products) of real

  SupplierId: array(Suppliers) of integer
  SupplierEasting: array(Customers) of real
  SupplierNorthing: array(Customers) of real
  SupplierProductGroup: array(Suppliers) of integer
  SupplierCapacity: array(Suppliers) of real
  SupplierVehicleType: array(Suppliers) of integer

  SetupWarehouses: array(Locations) of integer
  OperatingWarehouses: array(Locations) of integer

  Distance: array(Customers,Locations) of real
  DistanceSupplier: array(Locations,Suppliers) of real
  Cost: array(Customers,Locations) of real
  CostSupplier: array(Locations,Suppliers) of real

  VehicleCapacity: array(Vehicles) of real
  VehicleCostPerMileOverall: array(Vehicles) of real
  VehicleCostPerMileAndTonneOverall: array(Vehicles) of real
  VehicleCO2PerMileAndTonne: array(Vehicles) of real

end-declarations


declarations
  Y: array(Locations) of integer
  op: array(Locations) of integer
  X: array(Customers,Products,Periods) of integer
  Z: array(Suppliers,Locations,Products) of integer
  Omega, OmegaRule: set of integer

  x: array(Locations,Customers,Products,Periods) of mpvar
  z: array(Suppliers,Locations,Products,Periods) of mpvar
  y: array(Locations) of mpvar

end-declarations

initializations from filename
  CustomerId CustomerEasting CustomerNorthing
  SetupWarehouses OperatingWarehouses
  SupplierId SupplierProductGroup SupplierCapacity SupplierVehicleType
  SupplierEasting SupplierNorthing
  VehicleCapacity VehicleCostPerMileOverall VehicleCostPerMileAndTonneOverall
  VehicleCO2PerMileAndTonne
  Demand as "CustomerDemand"
  Distance as "DistanceLocationCustomer"
  DistanceSupplier as "DistanceLocationSupplier"
end-initializations


forall(l in Locations) do
  Y(l):= 0
end-do

!according to given data
Y(10) := 1
Y(30) := 3
Y(50) := 5

forall(j in Locations,p in Products,i in Customers) do
  if(Y(j)>0) then
    forall(t in Y(j)..nbPeriods) do
      x(j,i,p,t) >= 0
    end-do
  end-if
end-do


forall(s in Suppliers,j in Locations,p in Products) do
  if(Y(j)>0) then
    forall(t in Y(j)..nbPeriods) do
      z(s,j,p,t) >= 0
    end-do
  end-if
end-do



forall(j in Locations) do
  if(Y(j)>0) then
    op(j):=1
  else
  op(j):=0
  end-if
end-do



forall(j in Locations, s in Suppliers) do
  if(SupplierVehicleType(s) = 1) then
    CostSupplier(j,s) := DistanceSupplier(j,s) * VehicleCostPerMileAndTonneOverall(1) / 1000
  else
    CostSupplier(j,s) := DistanceSupplier(j,s) * VehicleCostPerMileAndTonneOverall(2) / 1000
  end-if
end-do

forall(i,j in Locations)
  Cost(i,j) := Distance(i,j) * VehicleCostPerMileAndTonneOverall(3) / 1000


forall(i in Customers, t in Periods,p in Products) do
  sum(j in Locations) x(j,i,p,t) >= Demand(i,p,t)
end-do

forall(j in Locations,t in Periods,p in Products) do
  sum(s in Suppliers) z(s,j,p,t) >= sum(i in Customers) x(j,i,p,t)
end-do

forall(s in Suppliers,p in Products, j in Locations,t in Periods) do
  if(SupplierProductGroup(s)=Products(p)) then
    z(s,j,p,t)>=0
  else
    z(s,j,p,t)=0
  end-if
end-do

setup := sum(j in Locations) op(j)*SetupWarehouses(j)

forall(j in Locations) do
  if(Y(j)>0) then
  operatingcost := (11 - Y(j))* OperatingWarehouses(j)
  else
  operatingcost := 0
  end-if
end-do

!transport := sum(j in Locations, i in Locations, p in Products, t in Periods) Cost(i,j)*x(j,i,p,t) + sum(s in Suppliers, j in Locations, p in Products, t in Periods) CostSupplier(j,s)*z(s,j,p,t)


obj := sum(j in Locations) operatingcost

minimize(obj)

  writeln("Begin running model")
  !...
  writeln("End running model")

end-model
